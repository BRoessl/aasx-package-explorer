@page "/"
@using AdminShellNS
@using static AdminShellNS.AdminShellV20;
@*using BlazorUI*@
@using AnyUi
@using BlazorUI.Shared
@using System
@using System.Net;
@inject BlazorUI.Data.AASService SubmodelService

<div class="col-12 row">
    <br />
    <div class="col-8" style="border-style:solid;border-color:blue;border-radius:8px;word-wrap:break-word;position:sticky">
        @* @if (Program.isLoading)
            {<span style="color:white;background-color:blue;">Loading...</span>} *@
        <Tree Nodes="Items" ChildSelector="@(item => item.Childs)"
              @bind-SelectedNode="SelectedNode"
              @bind-ExpandedNodes="ExpandedNodes"
              HasChildNodes="@(item => item.Childs?.Any() == true)">
            <TitleTemplate>
                @{ //// SubmodelService.syncSubTree(context);
                }
                <span style="color:white;background-color:blue;">@ViewNodeType(context)</span> @ViewNodeID(context)@ViewNodeInfo(context)
                <strong><span style="color:blue">@getSymbols(context)</span></strong>
            </TitleTemplate>
        </Tree>
        <br /><br />
    </div>
    <div class="col-4" style="border-style:solid;border-color:blue;border-radius:8px;position:sticky">
        <div class="sticky-top" style="word-wrap:break-word">
            @{
                if (selectedNode != null && selectedNode.Tag != null)
                {
                    bool view = false;
                    if (selectedNode.Tag is AdministrationShell)
                    {
                        Program.stack17 = new AnyUiStackPanel();
                        Program.stack17.Orientation = AnyUiOrientation.Vertical;
                        Program.helper.DisplayOrEditAasEntityAas(
                                    Program.packages, Program.env.AasEnv, selectedNode.Tag as AdministrationShell, Program.editMode, Program.stack17, hintMode: Program.hintMode);
                        if (Program.stack17.Children.Count != 0)
                            view = true;
                    }
                    if (selectedNode.Tag is Submodel)
                    {
                        Program.stack17 = new AnyUiStackPanel();
                        Program.stack17.Orientation = AnyUiOrientation.Vertical;
                        Program.helper.DisplayOrEditAasEntitySubmodelOrRef(
                                    Program.packages, Program.env.AasEnv, Program.env.AasEnv.AdministrationShells[0],
                                    null, selectedNode.Tag as Submodel, Program.editMode, Program.stack17, hintMode: Program.hintMode);
                        if (Program.stack17.Children.Count != 0)
                            view = true;
                    }
                    if (selectedNode.Tag is SubmodelElement sme)
                    {
                        Program.stack17 = new AnyUiStackPanel();
                        Program.stack17.Orientation = AnyUiOrientation.Vertical;
                        Program.helper.DisplayOrEditAasEntitySubmodelElement(
                                    Program.packages, Program.env.AasEnv, sme.parent,
                                    null,
                                    sme, Program.editMode, Program.repo, Program.stack17, hintMode: Program.hintMode);
                        if (Program.stack17.Children.Count != 0)
                            view = true;
                    }

                    if (view)
                    {
                        /*
                        <br />
                        <span><b>@Program.LogLine</b></span>
                        <br /><br />
                        */

                        /*
                        <table>
                            <tr>
                                <td>pre</td>
                                <td>
                                    <select class="form-control selectpicker" value="item1">
                                        <option value="item1">"item1"</option>
                                        <option value="item2">"item2"</option>
                                    </select>
                                </td>
                                <td>post</td>
                            </tr>
                        </table>
                        */

                        int iChild = 0;
                        AnyUiPanel uiPanel = Program.stack17;
                        Program.AnyUiPanelEntryStack uipStack = new Program.AnyUiPanelEntryStack();
                        bool combo = false;

                        do
                        {
                            if (iChild == uiPanel.Children.Count)
                            {
                                uipStack.Pop(out uiPanel, out iChild);
                                <br />
                                combo = false;
                            }

                            while (iChild < uiPanel.Children.Count)
                            {
                                var ch = uiPanel.Children[iChild];

                                if (ch is AnyUiPanel chp)
                                {
                                    // <bold>ChildPanel on Level @uipStack.getIndex()</bold>
                                    // <br />

                                    uipStack.Push(uiPanel, iChild);

                                    uiPanel = chp;
                                    iChild = 0;
                                    continue;
                                }

                                if (!combo && uiPanel is AnyUiGrid gr && (iChild == 0 || iChild == 2))
                                {
                                    if (gr.ColumnDefinitions.Count > 1)
                                    {
                                        int i = iChild;
                                        while (i < uiPanel.Children.Count)
                                        {
                                            if (uiPanel.Children[i] is AnyUiComboBox)
                                            {
                                                combo = true;
                                                break;
                                            }
                                            i++;
                                        }
                                    }
                                }

                                if (combo)
                                {
                                    if (uiPanel.Children.Count == 2 || (uiPanel.Children.Count == 7 && iChild == 2))
                                    {
                                        <table>
                                            <tr>
                                                @{
                                                    while (iChild < uiPanel.Children.Count)
                                                    {
                                                        <td>
                                                            @{
                                                                ch = uiPanel.Children[iChild];

                                                                if (ch is AnyUiTextBlock tb1)
                                                                {
                                                                    <span>@tb1.Text</span>
                                                                }

                                                                if (ch is AnyUiComboBox comb1)
                                                                {
                                                                    string w = (comb1.Text.Length * 11 + 60).ToString() + "px";
                                                                    <select class="form-control selectpicker" value="@comb1.Text" style="width:@w"
                                                                            @onchange="@((ChangeEventArgs __e) => MyComboSelect2(comb1, __e.Value.ToString()))">
                                                                        @foreach (var item in comb1.Items)
                                                                        {
                                                                            <option value="@item">@item</option>
                                                                        }
                                                                    </select>
                                                                    @code {
                                                                        private void MyComboSelect2(AnyUiComboBox comb, string value)
                                                                        {
                                                                            comb.setValueLambda?.Invoke(value);
                                                                        }
                                                                    }
                                                                }

                                                                string style2 = "";
                                                                if (ch is AnyUiTextBox chtb2)
                                                                {
                                                                    if (ch is AnyUiHintBubble hb2)
                                                                    {
                                                                        if (style2 != "")
                                                                        {
                                                                            <span style="@style2">@hb2.Text</span>
                                                                        }
                                                                        else
                                                                        {
                                                                            <span>@hb2.Text</span>
                                                                        }
                                                                        <br />
                                                                    }
                                                                    else
                                                                    {
                                                                        int w = chtb2.Text.Length;
                                                                        if (w > 60)
                                                                            w = 60;
                                                                        if (style2 != "")
                                                                        {
                                                                            <span style="@style2">
                                                                                <input size="@w" value="@chtb2.Text"
                                                                                       @onchange="@((ChangeEventArgs __e) => MyTextInput2(chtb2, __e.Value.ToString()))" />
                                                                            </span>
                                                                        }
                                                                        else
                                                                        {
                                                                            <span>
                                                                                <input size="@w" value="@chtb2.Text"
                                                                                       @onchange="@((ChangeEventArgs __e) => MyTextInput2(chtb2, __e.Value.ToString()))" />
                                                                            </span>
                                                                        }
                                                                        @code {
                                                                            private void MyTextInput2(AnyUiTextBox chtb, string value)
                                                                            {
                                                                                chtb.setValueLambda?.Invoke(value);
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                if (ch is AnyUiButton chbt2)
                                                                {
                                                                    if (style2 != "")
                                                                    {
                                                                        <button style="@style2" @onclick="() => MyClickButton2(chbt2)">@chbt2.Content</button>
                                                                    }
                                                                    else
                                                                    {
                                                                        <button @onclick="() => MyClickButton2(chbt2)">@chbt2.Content</button>
                                                                    }
                                                                    @code {

                                                                        private void MyClickButton2(AnyUiButton chbt)
                                                                        {
                                                                            chbt.setValueLambda?.Invoke(chbt.Content);
                                                                        }
                                                                    }
                                                                }

                                                                if (ch is AnyUiCheckBox cb2)
                                                                {
                                                                    <input type="checkbox" value="@cb2.IsChecked"
                                                                           @onchange="@((ChangeEventArgs __e) => MyCheck2(cb2, __e.Value.ToString()))" />
                                                                    @cb2.Content
                                                                    @code {
                                                                        private void MyCheck2(AnyUiCheckBox cb2, string value)
                                                                        {
                                                                            cb2.setValueLambda?.Invoke(value);
                                                                        }
                                                                    }
                                                                }
                                                                iChild++;
                                                            }
                                                        </td>
                                                    }
                                                }
                                            </tr>
                                        </table>
                                        continue;
                                    }
                                }

                                string backColor = "";
                                string foreColor = "";
                                if (ch is AnyUiControl ctrl)
                                {
                                    if (ctrl.Background != null)
                                    {
                                        backColor = "rgb(" +
                                            ctrl.Background.Color.R + ", " +
                                            ctrl.Background.Color.G + ", " +
                                            ctrl.Background.Color.B + ")";
                                    }
                                    if (ctrl.Foreground != null)
                                    {
                                        foreColor = "rgb(" +
                                            ctrl.Foreground.Color.R + ", " +
                                            ctrl.Foreground.Color.G + ", " +
                                            ctrl.Foreground.Color.B + ")";
                                    }
                                }
                                string style = "";
                                if (foreColor != "")
                                    style += "color:" + foreColor + ";";
                                if (backColor != "")
                                    style += "background-color:" + backColor + ";";

                                if (ch is AnyUiLabel chlb)
                                {
                                    if (style != "")
                                    {
                                        <span style="@style">@chlb.Content</span>
                                    }
                                    else
                                    {
                                        <span>@chlb.Content</span>
                                    }
                                }

                                if (ch is AnyUiTextBlock tb)
                                {
                                    <span>@tb.Text</span>
                                }

                                if (ch is AnyUiTextBox chtb)
                                {
                                    if (ch is AnyUiHintBubble hb)
                                    {
                                        if (style != "")
                                        {
                                            <span style="@style">@hb.Text</span>
                                        }
                                        else
                                        {
                                            <span>@hb.Text</span>
                                        }
                                        <br />
                                    }
                                    else
                                    {
                                        int w = chtb.Text.Length;
                                        if (w > 60)
                                            w = 60;
                                        if (style != "")
                                        {
                                            <span style="@style">
                                                <input size="@w" value="@chtb.Text"
                                                       @onchange="@((ChangeEventArgs __e) => MyTextInput(chtb, __e.Value.ToString()))" />
                                            </span>
                                        }
                                        else
                                        {
                                            <span>
                                                <input size="@w" value="@chtb.Text"
                                                       @onchange="@((ChangeEventArgs __e) => MyTextInput(chtb, __e.Value.ToString()))" />
                                            </span>
                                        }
                                        @code {
                                            private void MyTextInput(AnyUiTextBox chtb, string value)
                                            {
                                                chtb.setValueLambda?.Invoke(value);
                                            }
                                        }
                                    }
                                }

                                if (ch is AnyUiButton chbt)
                                {
                                    if (style != "")
                                    {
                                        <button style="@style" @onclick="() => MyClickButton(chbt)">@chbt.Content</button>
                                    }
                                    else
                                    {
                                        <button @onclick="() => MyClickButton(chbt)">@chbt.Content</button>
                                    }
                                    @code {

                                        private void MyClickButton(AnyUiButton chbt)
                                        {
                                            chbt.setValueLambda?.Invoke(chbt.Content);
                                        }
                                    }
                                }

                                if (ch is AnyUiCheckBox cb)
                                {
                                    <input type="checkbox" value="@cb.IsChecked"
                                           @onchange="@((ChangeEventArgs __e) => MyCheck(cb, __e.Value.ToString()))" />
                                    @cb.Content
                                    @code {
                                        private void MyCheck(AnyUiCheckBox cb, string value)
                                        {
                                            cb.setValueLambda?.Invoke(value);
                                        }
                                    }
                                }

                                if (ch is AnyUiComboBox comb)
                                {
                                    string w = (comb.Text.Length * 11 + 60).ToString() + "px";
                                    <select class="form-control selectpicker" value="@comb.Text" style="width:@w"
                                            @onchange="@((ChangeEventArgs __e) => MyComboSelect(comb, __e.Value.ToString()))">
                                        @foreach (var item in comb.Items)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </select>
                                    @code {
                                        private void MyComboSelect(AnyUiComboBox comb, string value)
                                        {
                                            comb.setValueLambda?.Invoke(value);
                                        }
                                    }
                                }

                                iChild++;
                            }
                        }
                        while (uipStack.getIndex() > 0);
                    }
                }
            }
        </div>
    </div>
</div>

@code {

    public class Item
    {
        public string Text { get; set; }
        public IEnumerable<Item>
        Childs
        { get; set; }
        public object parent { get; set; }
        public string Type { get; set; }
        public object Tag { get; set; }
        public int envIndex { get; set; }
    }

    List<Item> Items = null;

    IList<Item> ExpandedNodes = new List<Item>();
    Item selectedNode;
    Item SelectedNode
    {
        get { return selectedNode; }
        set
        {
            selectedNode = value;
            // OnSelectNode(selectedNode);
        }
    }

    protected override void OnInitialized()
    {
        // OnInitialized() allways called twice
        //// if (hack++ == 0)
        ////    return;

        SubmodelService.buildTree();
        Items = SubmodelService.GetTree();
        StateHasChanged();

        //ExpandedNodes.Add(Items.Skip(1).First());
        //ExpandedNodes.Add(Items.Skip(1).Take(1).First().Childs.Skip(1).First());

        SubmodelService.NewDataAvailable += NewData;
    }
    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }
    void NewData(object source, EventArgs args)
    {
        Items = SubmodelService.GetTree();
        InvokeAsync(() => this.StateHasChanged());
    }


    string getSymbols(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";
        object o = item.Tag;

        if (o is AdministrationShell)
        {
        }

        return ret;
    }

    string ViewNodeType(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";

        if (item.Type != null)
        {
            ret = item.Type + " ";
        }

        object o = item.Tag;

        /*
        if (o is Referable)
        {
            ret = (o as Referable).GetElementName();
            return (ret);
        }
        */

        if (o is AdministrationShell)
        {
            ret += "AAS";
        }
        if (o is Submodel)
        {
            ret += "Sub";
        }
        if (o is SubmodelElement)
        {
            if (o is SubmodelElementCollection)
            {
                ret += "Coll";
            }
            if (o is Property)
            {
                ret += "Prop";
            }
        }
        if (o is Operation)
        {
            ret += "Opr";
        }
        if (o is File)
        {
            ret += "File";
        }
        if (o is Blob)
        {
            ret += "Blob";
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            ret += "Range";
        }
        if (o is MultiLanguageProperty)
        {
            ret += "Lang";
        }
        if (o is RelationshipElement)
        {
            ret += "Rel";
        }
        if (o is ReferenceElement)
        {
            ret += "Ref";
        }
        if (o is Entity)
        {
            ret += "Ent";
        }
        if (o is AdminShellNS.AdminShellV20.BasicEvent)
        {
            ret += "Evt";
        }

        return (ret);
    }

    string ViewNodeID(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "NULL";

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            ret = aas.idShort;
        }
        if (o is Submodel)
        {
            var sm = o as Submodel;
            ret = "";
            if (sm.kind != null && sm.kind.IsTemplate)
                ret += "<T> ";
            ret += sm.idShort;
        }
        if (o is SubmodelElement)
        {
            var sme = o as SubmodelElement;
            ret = "";
            if (sme.kind != null && sme.kind.IsTemplate)
                ret += "<T> ";
            ret += sme.idShort;
        }
        if (o is File)
        {
            var f = o as File;
            ret = "";
            if (f.kind != null && f.kind.IsTemplate)
                ret += "<T> ";
            ret += f.idShort;
        }
        if (o is Blob)
        {
            var b = o as Blob;
            ret = "";
            if (b.kind != null && b.kind.IsTemplate)
                ret += "<T> ";
            ret += b.idShort;
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            var r = o as AdminShellNS.AdminShellV20.Range;
            ret = "";
            if (r.kind != null && r.kind.IsTemplate)
                ret += "<T> ";
            ret += r.idShort;
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            ret = "";
            if (mlp.kind != null && mlp.kind.IsTemplate)
                ret += "<T> ";
            ret += mlp.idShort;
        }
        return (ret);
    }

    string ViewNodeInfo(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            // ret = aas.identification.ToString();
        }
        if (o is Submodel)
        {
            var sm = o as Submodel;
            // ret = sm.identification.ToString();
            if (sm.qualifiers != null && sm.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        if (o is SubmodelElementCollection)
        {
            var sme = o as SubmodelElementCollection;
            // ret = sm.identification.ToString();
            if (sme.value.Count > 0)
            {
                ret += " #" + sme.value.Count;
            }
        }
        if (o is SubmodelElement)
        {
            if (o is Property)
            {
                var prop = o as Property;
                if (prop.value != "")
                {
                    ret = " = " + prop.value;
                }
                if (prop.qualifiers != null && prop.qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }
            }
            if (o is File)
            {
                var f = o as File;
                ret = " = " + f.value;
                if (f.qualifiers != null && f.qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }
            }
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            var r = o as AdminShellNS.AdminShellV20.Range;
            ret = " = " + r.min + " .. " + r.max;
            if (r.qualifiers != null && r.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            var ls = mlp.value;
            ret = " = ";
            for (int i = 0; i < ls.Count; i++)
            {
                ret += ls.langString[i].lang + " ";
            }
            if (mlp.qualifiers != null && mlp.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        return (ret);
    }
}

