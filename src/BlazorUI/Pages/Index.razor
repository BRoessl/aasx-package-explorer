@page "/"
@using AdminShellNS
@using static AdminShellNS.AdminShellV20;
@*using BlazorUI*@
@using AnyUi
@using BlazorUI.Shared
@using System
@using System.Net;
@inject BlazorUI.Data.AASService SubmodelService

<div class="col-12 row">
    <br />
    <div class="col-4">
        <div class="row-12">
            <div class="row" style="border-style:solid;border-color:blue;border-radius:8px;word-wrap:break-word;position:sticky;padding:10px">
                @{
                    string text = "Messages and selected items will be shown here";
                    <br />
                    <b>@text</b>
                    <br />
                }
            </div>
            <div class="row" style="border-style:solid;border-color:blue;border-radius:8px;word-wrap:break-word;position:sticky;padding:10px">
                @* @if (Program.isLoading)
                    {<span style="color:white;background-color:blue;">Loading...</span>} *@
                <Tree Nodes="Items" ChildSelector="@(item => item.Childs)"
                      @bind-SelectedNode="SelectedNode"
                      @bind-ExpandedNodes="ExpandedNodes"
                      HasChildNodes="@(item => item.Childs?.Any() == true)">
                    <TitleTemplate>
                        @{ //// SubmodelService.syncSubTree(context);
                        }
                        <span style="color:white;background-color:blue;">@ViewNodeType(context)</span> @ViewNodeID(context)@ViewNodeInfo(context)
                        <strong><span style="color:blue">@getSymbols(context)</span></strong>
                    </TitleTemplate>
                </Tree>
                @*<br /><br />*@
                <br />
            </div>
            <div class="row" style="border-style:solid;border-color:blue;border-radius:8px;word-wrap:break-word;position:sticky;padding:10px">
                @{
                    if (selectedNode == null || selectedNode.Tag != null)
                    {
                        {
                            if (Program.thumbNail == null)
                            {
                                var s = Program.env.GetLocalThumbnailStream();
                                if (s != null)
                                {
                                    using (var m = new System.IO.MemoryStream())
                                    {
                                        s.CopyTo(m);
                                        Program.thumbNail = System.Convert.ToBase64String(m.ToArray());
                                    }
                                }
                            }
                            if (Program.thumbNail != null)
                            {
                                <br />
                                <img src=data:image;base64,@Program.thumbNail style="max-width: 60%;" alt="Details Image" />
                            }
                        }
                    }
                }
            </div>
        </div>
    </div>
    <div class="col-8" style="border-style:solid;border-color:blue;border-radius:8px;position:sticky;padding:10px">
        <div class="sticky-top" style="word-wrap:break-word">
            @{
                if (selectedNode != null && selectedNode.Tag != null)
                {
                    bool view = false;
                    Program.helper.editMode = Program.editMode;
                    if (Program.editMode)
                    {
                        Program.helper.repo = Program.repo;
                    }
                    else
                    {
                        Program.helper.repo = null;
                    }
                    if (selectedNode.Tag is AdministrationShell)
                    {
                        Program.stack17 = new AnyUiStackPanel();
                        Program.stack17.Orientation = AnyUiOrientation.Vertical;
                        Program.helper.DisplayOrEditAasEntityAas(
                                    Program.packages, Program.env.AasEnv, selectedNode.Tag as AdministrationShell, Program.editMode, Program.stack17, hintMode: Program.hintMode);
                        if (Program.stack17.Children.Count != 0)
                            view = true;
                    }
                    if (selectedNode.Tag is Submodel)
                    {
                        Program.stack17 = new AnyUiStackPanel();
                        Program.stack17.Orientation = AnyUiOrientation.Vertical;
                        Program.helper.DisplayOrEditAasEntitySubmodelOrRef(
                                    Program.packages, Program.env.AasEnv, Program.env.AasEnv.AdministrationShells[0],
                                    null, selectedNode.Tag as Submodel, Program.editMode, Program.stack17, hintMode: Program.hintMode);
                        if (Program.stack17.Children.Count != 0)
                            view = true;
                    }
                    if (selectedNode.Tag is SubmodelElement sme)
                    {
                        Program.stack17 = new AnyUiStackPanel();
                        Program.stack17.Orientation = AnyUiOrientation.Vertical;
                        Program.helper.DisplayOrEditAasEntitySubmodelElement(
                                    Program.packages, Program.env.AasEnv, selectedNode.ParentContainer,
                                    selectedNode.Wrapper,
                                    sme, Program.editMode, Program.repo, Program.stack17, hintMode: Program.hintMode);
                        if (Program.stack17.Children.Count != 0)
                            view = true;
                    }

                    if (view)
                    {
                        AnyUiPanel topPanel = Program.stack17;
                        Program.AnyUiPanelEntryStack uipStack = new Program.AnyUiPanelEntryStack();

                        foreach (AnyUiUIElement topCh in topPanel.Children)
                        {
                            AnyUiPanel uiPanel = null;
                            if (topCh is AnyUiPanel)
                                uiPanel = topCh as AnyUiPanel;
                            int iChild = 0;
                            bool newTab = true;
                            AnyUiUIElement prevCh = null;

                            while (newTab)
                            {
                                newTab = false;
                                <table>
                                <tr>
                                @{ 
                                    do
                                    {
                                        if (uiPanel != null && iChild == uiPanel.Children.Count)
                                        {
                                            uipStack.Pop(out uiPanel, out iChild);
                                        }

                                        int iChildCount = 1;
                                        if (uiPanel != null)
                                            iChildCount = uiPanel.Children.Count;

                                        while (!newTab && iChild < iChildCount)
                                        {
                                            AnyUiUIElement ch;
                                            if (uiPanel != null)
                                                ch = uiPanel.Children[iChild];
                                            else
                                                ch = topCh;

                                            if (ch is AnyUiPanel chp)
                                            {
                                                uipStack.Push(uiPanel, iChild);

                                                uiPanel = chp;
                                                iChild = 0;
                                                iChildCount = uiPanel.Children.Count;
                                                continue;
                                            }

                                            string backColor = "";
                                            string foreColor = "";
                                            if (ch is AnyUiControl ctrl)
                                            {
                                                if (ctrl.Background != null)
                                                {
                                                    backColor = "rgb(" +
                                                        ctrl.Background.Color.R + ", " +
                                                        ctrl.Background.Color.G + ", " +
                                                        ctrl.Background.Color.B + ")";
                                                }
                                                if (ctrl.Foreground != null)
                                                {
                                                    foreColor = "rgb(" +
                                                        ctrl.Foreground.Color.R + ", " +
                                                        ctrl.Foreground.Color.G + ", " +
                                                        ctrl.Foreground.Color.B + ")";
                                                }
                                            }
                                            string style = "";
                                            if (foreColor != "")
                                                style += "color:" + foreColor + ";";
                                            if (backColor != "")
                                                style += "background-color:" + backColor + ";";

                                            if (ch is AnyUiLabel chlb)
                                            {
                                            <td><span style="@style">@chlb.Content</span></td>
                                            }

                                            if (ch is AnyUiTextBlock tb)
                                            {
                                                <td><span>@tb.Text</span></td>
                                            }

                                            if (ch is AnyUiTextBox chtb)
                                            {
                                                if (ch is AnyUiHintBubble hb)
                                                {
                                                    if (Program.editMode)
                                                    {
                                                        <td><span style="@style">@hb.Text</span></td>
                                                    }
                                                }
                                                else
                                                {
                                                    int w = chtb.Text.Length;
                                                    if (w > 60)
                                                        w = 60;
                                                    <td><span style="@style">
                                                        <input size="@w" value="@chtb.Text"
                                                                @onchange="@((ChangeEventArgs __e) => MyTextInput(chtb, __e.Value.ToString()))" />
                                                    </span></td>
                                                    @code {
                                                        private void MyTextInput(AnyUiTextBox chtb, string value)
                                                        {
                                                            chtb.setValueLambda?.Invoke(value);
                                                        }
                                                    }
                                                }
                                            }

                                            if (ch is AnyUiButton chbt)
                                            {
                                                <td><button style="@style" @onclick="() => MyClickButton(chbt)">@chbt.Content</button></td>
                                                @code {
                                                    private void MyClickButton(AnyUiButton chbt)
                                                    {
                                                        chbt.setValueLambda?.Invoke(chbt.Content);
                                                    }
                                                }
                                            }

                                            if (ch is AnyUiCheckBox cb)
                                            {
                                                <td>
                                                    <input type="checkbox" value="@cb.IsChecked"
                                                            @onchange="@((ChangeEventArgs __e) => MyCheck(cb, __e.Value.ToString()))" />
                                                    @cb.Content
                                                </td>
                                                @code {
                                                    private void MyCheck(AnyUiCheckBox cb, string value)
                                                    {
                                                        cb.setValueLambda?.Invoke(value.ToLower() == "true");
                                                    }
                                                }
                                            }

                                            if (ch is AnyUiComboBox comb)
                                            {
                                                if (prevCh is AnyUiButton)
                                                {
                                                    newTab = true;
                                                    prevCh = null;
                                                    continue;
                                                }

                                                string w = (comb.Text.Length * 11 + 60).ToString() + "px";
                                                <td>
                                                    <select class="form-control selectpicker" value="@comb.Text" style="width:@w"
                                                            @onchange="@((ChangeEventArgs __e) => MyComboSelect(comb, __e.Value.ToString()))">
                                                        @foreach (var item in comb.Items)
                                                        {
                                                            <option value="@item">@item</option>
                                                        }
                                                    </select>
                                                </td>
                                                @code {
                                                    private void MyComboSelect(AnyUiComboBox comb, string value)
                                                    {
                                                        comb.setValueLambda?.Invoke(value);
                                                    }
                                                }
                                            }

                                            prevCh = ch;
                                            iChild++;
                                        }
                                    }
                                    while (!newTab && uipStack.getIndex() > 0);
                                }
                                </tr>
                                </table>
                            }
                        }
                    }
                }
            }
        </div>
    </div>
</div>


@code {

    public class Item
    {
        public string Text { get; set; }
        public IEnumerable<Item>
        Childs
        { get; set; }
        public object parent { get; set; }
        public string Type { get; set; }
        public object Tag { get; set; }
        public Referable ParentContainer { get; set; }
        public SubmodelElementWrapper Wrapper { get; set; }
        public int envIndex { get; set; }
    }

    List<Item> Items = null;

    IList<Item> ExpandedNodes = new List<Item>();
    Item selectedNode;
    Item SelectedNode
    {
        get { return selectedNode; }
        set
        {
            selectedNode = value;
            // OnSelectNode(selectedNode);
        }
    }

    protected override void OnInitialized()
    {
        // OnInitialized() allways called twice
        //// if (hack++ == 0)
        ////    return;

        SubmodelService.buildTree();
        Items = SubmodelService.GetTree();
        StateHasChanged();

        //ExpandedNodes.Add(Items.Skip(1).First());
        //ExpandedNodes.Add(Items.Skip(1).Take(1).First().Childs.Skip(1).First());

        SubmodelService.NewDataAvailable += NewData;
    }
    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }
    void NewData(object source, EventArgs args)
    {
        Items = SubmodelService.GetTree();
        InvokeAsync(() => this.StateHasChanged());
    }


    string getSymbols(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";
        object o = item.Tag;

        if (o is AdministrationShell)
        {
        }

        return ret;
    }

    string ViewNodeType(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";

        if (item.Type != null)
        {
            ret = item.Type + " ";
        }

        object o = item.Tag;

        /*
        if (o is Referable)
        {
            ret = (o as Referable).GetElementName();
            return (ret);
        }
        */

        if (o is AdministrationShell)
        {
            ret += "AAS";
        }
        if (o is Submodel)
        {
            ret += "Sub";
        }
        if (o is SubmodelElement)
        {
            if (o is SubmodelElementCollection)
            {
                ret += "Coll";
            }
            if (o is Property)
            {
                ret += "Prop";
            }
        }
        if (o is Operation)
        {
            ret += "Opr";
        }
        if (o is File)
        {
            ret += "File";
        }
        if (o is Blob)
        {
            ret += "Blob";
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            ret += "Range";
        }
        if (o is MultiLanguageProperty)
        {
            ret += "Lang";
        }
        if (o is RelationshipElement)
        {
            ret += "Rel";
        }
        if (o is ReferenceElement)
        {
            ret += "Ref";
        }
        if (o is Entity)
        {
            ret += "Ent";
        }
        if (o is AdminShellNS.AdminShellV20.BasicEvent)
        {
            ret += "Evt";
        }

        return (ret);
    }

    string ViewNodeID(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "NULL";

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            ret = aas.idShort;
        }
        if (o is Submodel)
        {
            var sm = o as Submodel;
            ret = "";
            if (sm.kind != null && sm.kind.IsTemplate)
                ret += "<T> ";
            ret += sm.idShort;
        }
        if (o is SubmodelElement)
        {
            var sme = o as SubmodelElement;
            ret = "";
            if (sme.kind != null && sme.kind.IsTemplate)
                ret += "<T> ";
            ret += sme.idShort;
        }
        if (o is File)
        {
            var f = o as File;
            ret = "";
            if (f.kind != null && f.kind.IsTemplate)
                ret += "<T> ";
            ret += f.idShort;
        }
        if (o is Blob)
        {
            var b = o as Blob;
            ret = "";
            if (b.kind != null && b.kind.IsTemplate)
                ret += "<T> ";
            ret += b.idShort;
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            var r = o as AdminShellNS.AdminShellV20.Range;
            ret = "";
            if (r.kind != null && r.kind.IsTemplate)
                ret += "<T> ";
            ret += r.idShort;
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            ret = "";
            if (mlp.kind != null && mlp.kind.IsTemplate)
                ret += "<T> ";
            ret += mlp.idShort;
        }
        return (ret);
    }

    string ViewNodeInfo(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            // ret = aas.identification.ToString();
        }
        if (o is Submodel)
        {
            var sm = o as Submodel;
            // ret = sm.identification.ToString();
            if (sm.qualifiers != null && sm.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        if (o is SubmodelElementCollection)
        {
            var sme = o as SubmodelElementCollection;
            // ret = sm.identification.ToString();
            if (sme.value.Count > 0)
            {
                ret += " #" + sme.value.Count;
            }
        }
        if (o is SubmodelElement)
        {
            if (o is Property)
            {
                var prop = o as Property;
                if (prop.value != "")
                {
                    ret = " = " + prop.value;
                }
                if (prop.qualifiers != null && prop.qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }
            }
            if (o is File)
            {
                var f = o as File;
                ret = " = " + f.value;
                if (f.qualifiers != null && f.qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }
            }
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            var r = o as AdminShellNS.AdminShellV20.Range;
            ret = " = " + r.min + " .. " + r.max;
            if (r.qualifiers != null && r.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            var ls = mlp.value;
            ret = " = ";
            for (int i = 0; i < ls.Count; i++)
            {
                ret += ls.langString[i].lang + " ";
            }
            if (mlp.qualifiers != null && mlp.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        return (ret);
    }
}

